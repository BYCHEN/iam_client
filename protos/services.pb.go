// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: services.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xbd, 0x01, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x55, 0x52, 0x44, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x32, 0x4f, 0x0a, 0x13,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x55, 0x52, 0x44, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x5e, 0x0a,
	0x18, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x55, 0x52, 0x44, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_services_proto_goTypes = []interface{}{
	(*Empty)(nil),                 // 0: protos.Empty
	(*UserInfo)(nil),              // 1: protos.UserInfo
	(*GetUserInput)(nil),          // 2: protos.GetUserInput
	(*GroupID)(nil),               // 3: protos.GroupID
	(*CreateGroupInput)(nil),      // 4: protos.CreateGroupInput
	(*CreateMembershipInput)(nil), // 5: protos.CreateMembershipInput
	(*GetUserByGroupOutput)(nil),  // 6: protos.GetUserByGroupOutput
}
var file_services_proto_depIdxs = []int32{
	1, // 0: protos.UserCURDController.CreateUser:input_type -> protos.UserInfo
	2, // 1: protos.UserCURDController.GetUser:input_type -> protos.GetUserInput
	3, // 2: protos.UserCURDController.GetUserByGroup:input_type -> protos.GroupID
	4, // 3: protos.GroupCURDController.CreateGroup:input_type -> protos.CreateGroupInput
	5, // 4: protos.MembershipCURDController.CreateMembership:input_type -> protos.CreateMembershipInput
	0, // 5: protos.UserCURDController.CreateUser:output_type -> protos.Empty
	1, // 6: protos.UserCURDController.GetUser:output_type -> protos.UserInfo
	6, // 7: protos.UserCURDController.GetUserByGroup:output_type -> protos.GetUserByGroupOutput
	0, // 8: protos.GroupCURDController.CreateGroup:output_type -> protos.Empty
	0, // 9: protos.MembershipCURDController.CreateMembership:output_type -> protos.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	file_user_proto_init()
	file_group_proto_init()
	file_membership_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserCURDControllerClient is the client API for UserCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCURDControllerClient interface {
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error)
	GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GetUserByGroupOutput, error)
}

type userCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCURDControllerClient(cc grpc.ClientConnInterface) UserCURDControllerClient {
	return &userCURDControllerClient{cc}
}

func (c *userCURDControllerClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) GetUserByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GetUserByGroupOutput, error) {
	out := new(GetUserByGroupOutput)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/GetUserByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCURDControllerServer is the server API for UserCURDController service.
type UserCURDControllerServer interface {
	CreateUser(context.Context, *UserInfo) (*Empty, error)
	GetUser(context.Context, *GetUserInput) (*UserInfo, error)
	GetUserByGroup(context.Context, *GroupID) (*GetUserByGroupOutput, error)
}

// UnimplementedUserCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedUserCURDControllerServer struct {
}

func (*UnimplementedUserCURDControllerServer) CreateUser(context.Context, *UserInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) GetUser(context.Context, *GetUserInput) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) GetUserByGroup(context.Context, *GroupID) (*GetUserByGroupOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByGroup not implemented")
}

func RegisterUserCURDControllerServer(s *grpc.Server, srv UserCURDControllerServer) {
	s.RegisterService(&_UserCURDController_serviceDesc, srv)
}

func _UserCURDController_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).GetUser(ctx, req.(*GetUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_GetUserByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).GetUserByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/GetUserByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).GetUserByGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserCURDController",
	HandlerType: (*UserCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserCURDController_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserCURDController_GetUser_Handler,
		},
		{
			MethodName: "GetUserByGroup",
			Handler:    _UserCURDController_GetUserByGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// GroupCURDControllerClient is the client API for GroupCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupCURDControllerClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupInput, opts ...grpc.CallOption) (*Empty, error)
}

type groupCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCURDControllerClient(cc grpc.ClientConnInterface) GroupCURDControllerClient {
	return &groupCURDControllerClient{cc}
}

func (c *groupCURDControllerClient) CreateGroup(ctx context.Context, in *CreateGroupInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCURDControllerServer is the server API for GroupCURDController service.
type GroupCURDControllerServer interface {
	CreateGroup(context.Context, *CreateGroupInput) (*Empty, error)
}

// UnimplementedGroupCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedGroupCURDControllerServer struct {
}

func (*UnimplementedGroupCURDControllerServer) CreateGroup(context.Context, *CreateGroupInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}

func RegisterGroupCURDControllerServer(s *grpc.Server, srv GroupCURDControllerServer) {
	s.RegisterService(&_GroupCURDController_serviceDesc, srv)
}

func _GroupCURDController_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).CreateGroup(ctx, req.(*CreateGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GroupCURDController",
	HandlerType: (*GroupCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupCURDController_CreateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// MembershipCURDControllerClient is the client API for MembershipCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MembershipCURDControllerClient interface {
	CreateMembership(ctx context.Context, in *CreateMembershipInput, opts ...grpc.CallOption) (*Empty, error)
}

type membershipCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMembershipCURDControllerClient(cc grpc.ClientConnInterface) MembershipCURDControllerClient {
	return &membershipCURDControllerClient{cc}
}

func (c *membershipCURDControllerClient) CreateMembership(ctx context.Context, in *CreateMembershipInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/CreateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembershipCURDControllerServer is the server API for MembershipCURDController service.
type MembershipCURDControllerServer interface {
	CreateMembership(context.Context, *CreateMembershipInput) (*Empty, error)
}

// UnimplementedMembershipCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedMembershipCURDControllerServer struct {
}

func (*UnimplementedMembershipCURDControllerServer) CreateMembership(context.Context, *CreateMembershipInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}

func RegisterMembershipCURDControllerServer(s *grpc.Server, srv MembershipCURDControllerServer) {
	s.RegisterService(&_MembershipCURDController_serviceDesc, srv)
}

func _MembershipCURDController_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/CreateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).CreateMembership(ctx, req.(*CreateMembershipInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _MembershipCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MembershipCURDController",
	HandlerType: (*MembershipCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMembership",
			Handler:    _MembershipCURDController_CreateMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
