// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: services.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xa2, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x55, 0x52, 0x44, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x32, 0xf5, 0x02, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x55, 0x52, 0x44, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xa9, 0x07,
	0x0a, 0x18, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x55, 0x52, 0x44,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x15, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4a, 0x6f, 0x69, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4a,
	0x6f, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x22, 0x00, 0x32, 0xfe, 0x04, 0x0a, 0x18, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x55, 0x52, 0x44, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_services_proto_goTypes = []interface{}{
	(*UserInfo)(nil),                      // 0: protos.UserInfo
	(*UserID)(nil),                        // 1: protos.UserID
	(*GroupID)(nil),                       // 2: protos.GroupID
	(*LimitOffset)(nil),                   // 3: protos.LimitOffset
	(*UpdateInput)(nil),                   // 4: protos.UpdateInput
	(*empty.Empty)(nil),                   // 5: google.protobuf.Empty
	(*GroupInfo)(nil),                     // 6: protos.GroupInfo
	(*MembershipInfo)(nil),                // 7: protos.MembershipInfo
	(*MemUserGroupInput)(nil),             // 8: protos.MemUserGroupInput
	(*ListMembershipByUserInput)(nil),     // 9: protos.ListMembershipByUserInput
	(*ListMembershipByGroupInput)(nil),    // 10: protos.ListMembershipByGroupInput
	(*UpdateMembershipInput)(nil),         // 11: protos.UpdateMembershipInput
	(*PermissionInfo)(nil),                // 12: protos.PermissionInfo
	(*PermissionID)(nil),                  // 13: protos.PermissionID
	(*PermissionGroupInput)(nil),          // 14: protos.PermissionGroupInput
	(*UpdatePermissionByGroupInput)(nil),  // 15: protos.UpdatePermissionByGroupInput
	(*ListPermissionByGroupInput)(nil),    // 16: protos.ListPermissionByGroupInput
	(*UserInfos)(nil),                     // 17: protos.UserInfos
	(*ListUserOutput)(nil),                // 18: protos.ListUserOutput
	(*CountOutput)(nil),                   // 19: protos.CountOutput
	(*ListGroupOutput)(nil),               // 20: protos.ListGroupOutput
	(*ListMembershipJoinOutput)(nil),      // 21: protos.ListMembershipJoinOutput
	(*GetMembershipPermissionOutput)(nil), // 22: protos.GetMembershipPermissionOutput
	(*GBoolean)(nil),                      // 23: protos.GBoolean
	(*MemberJoin)(nil),                    // 24: protos.MemberJoin
	(*PermissionJoinUser)(nil),            // 25: protos.PermissionJoinUser
	(*PermissionJoinUsers)(nil),           // 26: protos.PermissionJoinUsers
}
var file_services_proto_depIdxs = []int32{
	0,  // 0: protos.UserCURDController.CreateUser:input_type -> protos.UserInfo
	1,  // 1: protos.UserCURDController.GetUser:input_type -> protos.UserID
	2,  // 2: protos.UserCURDController.ListUserByGroup:input_type -> protos.GroupID
	3,  // 3: protos.UserCURDController.ListUser:input_type -> protos.LimitOffset
	1,  // 4: protos.UserCURDController.DeleteUser:input_type -> protos.UserID
	4,  // 5: protos.UserCURDController.UpdateUser:input_type -> protos.UpdateInput
	5,  // 6: protos.UserCURDController.CountUser:input_type -> google.protobuf.Empty
	6,  // 7: protos.GroupCURDController.CreateGroup:input_type -> protos.GroupInfo
	2,  // 8: protos.GroupCURDController.DeleteGroup:input_type -> protos.GroupID
	2,  // 9: protos.GroupCURDController.GetGroup:input_type -> protos.GroupID
	5,  // 10: protos.GroupCURDController.CountGroup:input_type -> google.protobuf.Empty
	3,  // 11: protos.GroupCURDController.ListGroup:input_type -> protos.LimitOffset
	4,  // 12: protos.GroupCURDController.UpdateGroup:input_type -> protos.UpdateInput
	7,  // 13: protos.MembershipCURDController.CreateMembership:input_type -> protos.MembershipInfo
	8,  // 14: protos.MembershipCURDController.DeleteMembership:input_type -> protos.MemUserGroupInput
	1,  // 15: protos.MembershipCURDController.CountMembershipByUser:input_type -> protos.UserID
	9,  // 16: protos.MembershipCURDController.ListMembershipByUser:input_type -> protos.ListMembershipByUserInput
	2,  // 17: protos.MembershipCURDController.CountMembershipByGroup:input_type -> protos.GroupID
	10, // 18: protos.MembershipCURDController.ListMembershipByGroup:input_type -> protos.ListMembershipByGroupInput
	11, // 19: protos.MembershipCURDController.UpdateMembership:input_type -> protos.UpdateMembershipInput
	4,  // 20: protos.MembershipCURDController.UpdateMembershipByGroup:input_type -> protos.UpdateInput
	8,  // 21: protos.MembershipCURDController.GetMembership:input_type -> protos.MemUserGroupInput
	8,  // 22: protos.MembershipCURDController.GetMembershipPermission:input_type -> protos.MemUserGroupInput
	8,  // 23: protos.MembershipCURDController.GetFrozen:input_type -> protos.MemUserGroupInput
	8,  // 24: protos.MembershipCURDController.GetMembershipJoin:input_type -> protos.MemUserGroupInput
	12, // 25: protos.PermissionCURDController.CreatePermission:input_type -> protos.PermissionInfo
	13, // 26: protos.PermissionCURDController.DeletePermission:input_type -> protos.PermissionID
	14, // 27: protos.PermissionCURDController.GetPermissionByGroup:input_type -> protos.PermissionGroupInput
	15, // 28: protos.PermissionCURDController.UpdatePermissionByGroup:input_type -> protos.UpdatePermissionByGroupInput
	16, // 29: protos.PermissionCURDController.ListPermissionByGroup:input_type -> protos.ListPermissionByGroupInput
	14, // 30: protos.PermissionCURDController.CheckPermissionByGroup:input_type -> protos.PermissionGroupInput
	13, // 31: protos.PermissionCURDController.CheckPermissionByID:input_type -> protos.PermissionID
	2,  // 32: protos.PermissionCURDController.CountPermissionByGroup:input_type -> protos.GroupID
	5,  // 33: protos.UserCURDController.CreateUser:output_type -> google.protobuf.Empty
	0,  // 34: protos.UserCURDController.GetUser:output_type -> protos.UserInfo
	17, // 35: protos.UserCURDController.ListUserByGroup:output_type -> protos.UserInfos
	18, // 36: protos.UserCURDController.ListUser:output_type -> protos.ListUserOutput
	5,  // 37: protos.UserCURDController.DeleteUser:output_type -> google.protobuf.Empty
	5,  // 38: protos.UserCURDController.UpdateUser:output_type -> google.protobuf.Empty
	19, // 39: protos.UserCURDController.CountUser:output_type -> protos.CountOutput
	5,  // 40: protos.GroupCURDController.CreateGroup:output_type -> google.protobuf.Empty
	5,  // 41: protos.GroupCURDController.DeleteGroup:output_type -> google.protobuf.Empty
	6,  // 42: protos.GroupCURDController.GetGroup:output_type -> protos.GroupInfo
	19, // 43: protos.GroupCURDController.CountGroup:output_type -> protos.CountOutput
	20, // 44: protos.GroupCURDController.ListGroup:output_type -> protos.ListGroupOutput
	5,  // 45: protos.GroupCURDController.UpdateGroup:output_type -> google.protobuf.Empty
	5,  // 46: protos.MembershipCURDController.CreateMembership:output_type -> google.protobuf.Empty
	5,  // 47: protos.MembershipCURDController.DeleteMembership:output_type -> google.protobuf.Empty
	19, // 48: protos.MembershipCURDController.CountMembershipByUser:output_type -> protos.CountOutput
	21, // 49: protos.MembershipCURDController.ListMembershipByUser:output_type -> protos.ListMembershipJoinOutput
	19, // 50: protos.MembershipCURDController.CountMembershipByGroup:output_type -> protos.CountOutput
	21, // 51: protos.MembershipCURDController.ListMembershipByGroup:output_type -> protos.ListMembershipJoinOutput
	5,  // 52: protos.MembershipCURDController.UpdateMembership:output_type -> google.protobuf.Empty
	5,  // 53: protos.MembershipCURDController.UpdateMembershipByGroup:output_type -> google.protobuf.Empty
	7,  // 54: protos.MembershipCURDController.GetMembership:output_type -> protos.MembershipInfo
	22, // 55: protos.MembershipCURDController.GetMembershipPermission:output_type -> protos.GetMembershipPermissionOutput
	23, // 56: protos.MembershipCURDController.GetFrozen:output_type -> protos.GBoolean
	24, // 57: protos.MembershipCURDController.GetMembershipJoin:output_type -> protos.MemberJoin
	5,  // 58: protos.PermissionCURDController.CreatePermission:output_type -> google.protobuf.Empty
	5,  // 59: protos.PermissionCURDController.DeletePermission:output_type -> google.protobuf.Empty
	25, // 60: protos.PermissionCURDController.GetPermissionByGroup:output_type -> protos.PermissionJoinUser
	5,  // 61: protos.PermissionCURDController.UpdatePermissionByGroup:output_type -> google.protobuf.Empty
	26, // 62: protos.PermissionCURDController.ListPermissionByGroup:output_type -> protos.PermissionJoinUsers
	23, // 63: protos.PermissionCURDController.CheckPermissionByGroup:output_type -> protos.GBoolean
	23, // 64: protos.PermissionCURDController.CheckPermissionByID:output_type -> protos.GBoolean
	19, // 65: protos.PermissionCURDController.CountPermissionByGroup:output_type -> protos.CountOutput
	33, // [33:66] is the sub-list for method output_type
	0,  // [0:33] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	file_user_proto_init()
	file_group_proto_init()
	file_membership_proto_init()
	file_common_proto_init()
	file_permission_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserCURDControllerClient is the client API for UserCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCURDControllerClient interface {
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateUserWithResp(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfo, error)
	ListUserByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserInfos, error)
	ListUser(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*ListUserOutput, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUser(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateUserWithResp(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*UserInfo, error)
	CountUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountOutput, error)
}

type userCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCURDControllerClient(cc grpc.ClientConnInterface) UserCURDControllerClient {
	return &userCURDControllerClient{cc}
}

func (c *userCURDControllerClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) CreateUserWithResp(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/CreateUserWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) GetUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) ListUserByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*UserInfos, error) {
	out := new(UserInfos)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/ListUserByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) ListUser(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*ListUserOutput, error) {
	out := new(ListUserOutput)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) UpdateUser(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) UpdateUserWithResp(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/UpdateUserWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCURDControllerClient) CountUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountOutput, error) {
	out := new(CountOutput)
	err := c.cc.Invoke(ctx, "/protos.UserCURDController/CountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCURDControllerServer is the server API for UserCURDController service.
type UserCURDControllerServer interface {
	CreateUser(context.Context, *UserInfo) (*empty.Empty, error)
	CreateUserWithResp(context.Context, *UserInfo) (*UserInfo, error)
	GetUser(context.Context, *UserID) (*UserInfo, error)
	ListUserByGroup(context.Context, *GroupID) (*UserInfos, error)
	ListUser(context.Context, *LimitOffset) (*ListUserOutput, error)
	DeleteUser(context.Context, *UserID) (*empty.Empty, error)
	UpdateUser(context.Context, *UpdateInput) (*empty.Empty, error)
	UpdateUserWithResp(context.Context, *UpdateInput) (*UserInfo, error)
	CountUser(context.Context, *empty.Empty) (*CountOutput, error)
}

// UnimplementedUserCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedUserCURDControllerServer struct {
}

func (*UnimplementedUserCURDControllerServer) CreateUser(context.Context, *UserInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) CreateUserWithResp(context.Context, *UserInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserWithResp not implemented")
}
func (*UnimplementedUserCURDControllerServer) GetUser(context.Context, *UserID) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) ListUserByGroup(context.Context, *GroupID) (*UserInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserByGroup not implemented")
}
func (*UnimplementedUserCURDControllerServer) ListUser(context.Context, *LimitOffset) (*ListUserOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) DeleteUser(context.Context, *UserID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) UpdateUser(context.Context, *UpdateInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserCURDControllerServer) UpdateUserWithResp(context.Context, *UpdateInput) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWithResp not implemented")
}
func (*UnimplementedUserCURDControllerServer) CountUser(context.Context, *empty.Empty) (*CountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUser not implemented")
}

func RegisterUserCURDControllerServer(s *grpc.Server, srv UserCURDControllerServer) {
	s.RegisterService(&_UserCURDController_serviceDesc, srv)
}

func _UserCURDController_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_CreateUserWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).CreateUserWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/CreateUserWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).CreateUserWithResp(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).GetUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_ListUserByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).ListUserByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/ListUserByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).ListUserByGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).ListUser(ctx, req.(*LimitOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).DeleteUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).UpdateUser(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_UpdateUserWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).UpdateUserWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/UpdateUserWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).UpdateUserWithResp(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCURDController_CountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCURDControllerServer).CountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UserCURDController/CountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCURDControllerServer).CountUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UserCURDController",
	HandlerType: (*UserCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserCURDController_CreateUser_Handler,
		},
		{
			MethodName: "CreateUserWithResp",
			Handler:    _UserCURDController_CreateUserWithResp_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserCURDController_GetUser_Handler,
		},
		{
			MethodName: "ListUserByGroup",
			Handler:    _UserCURDController_ListUserByGroup_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _UserCURDController_ListUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserCURDController_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserCURDController_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserWithResp",
			Handler:    _UserCURDController_UpdateUserWithResp_Handler,
		},
		{
			MethodName: "CountUser",
			Handler:    _UserCURDController_CountUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// GroupCURDControllerClient is the client API for GroupCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupCURDControllerClient interface {
	CreateGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateGroupWithResp(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*GroupInfo, error)
	DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupInfo, error)
	CountGroup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountOutput, error)
	ListGroup(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*ListGroupOutput, error)
	UpdateGroup(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateGroupWithResp(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*GroupInfo, error)
}

type groupCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupCURDControllerClient(cc grpc.ClientConnInterface) GroupCURDControllerClient {
	return &groupCURDControllerClient{cc}
}

func (c *groupCURDControllerClient) CreateGroup(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) CreateGroupWithResp(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/CreateGroupWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) CountGroup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountOutput, error) {
	out := new(CountOutput)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/CountGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) ListGroup(ctx context.Context, in *LimitOffset, opts ...grpc.CallOption) (*ListGroupOutput, error) {
	out := new(ListGroupOutput)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/ListGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) UpdateGroup(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCURDControllerClient) UpdateGroupWithResp(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, "/protos.GroupCURDController/UpdateGroupWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCURDControllerServer is the server API for GroupCURDController service.
type GroupCURDControllerServer interface {
	CreateGroup(context.Context, *GroupInfo) (*empty.Empty, error)
	CreateGroupWithResp(context.Context, *GroupInfo) (*GroupInfo, error)
	DeleteGroup(context.Context, *GroupID) (*empty.Empty, error)
	GetGroup(context.Context, *GroupID) (*GroupInfo, error)
	CountGroup(context.Context, *empty.Empty) (*CountOutput, error)
	ListGroup(context.Context, *LimitOffset) (*ListGroupOutput, error)
	UpdateGroup(context.Context, *UpdateInput) (*empty.Empty, error)
	UpdateGroupWithResp(context.Context, *UpdateInput) (*GroupInfo, error)
}

// UnimplementedGroupCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedGroupCURDControllerServer struct {
}

func (*UnimplementedGroupCURDControllerServer) CreateGroup(context.Context, *GroupInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) CreateGroupWithResp(context.Context, *GroupInfo) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupWithResp not implemented")
}
func (*UnimplementedGroupCURDControllerServer) DeleteGroup(context.Context, *GroupID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) GetGroup(context.Context, *GroupID) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) CountGroup(context.Context, *empty.Empty) (*CountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) ListGroup(context.Context, *LimitOffset) (*ListGroupOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) UpdateGroup(context.Context, *UpdateInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedGroupCURDControllerServer) UpdateGroupWithResp(context.Context, *UpdateInput) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupWithResp not implemented")
}

func RegisterGroupCURDControllerServer(s *grpc.Server, srv GroupCURDControllerServer) {
	s.RegisterService(&_GroupCURDController_serviceDesc, srv)
}

func _GroupCURDController_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).CreateGroup(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_CreateGroupWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).CreateGroupWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/CreateGroupWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).CreateGroupWithResp(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).DeleteGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).GetGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_CountGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).CountGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/CountGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).CountGroup(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitOffset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/ListGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).ListGroup(ctx, req.(*LimitOffset))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).UpdateGroup(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCURDController_UpdateGroupWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCURDControllerServer).UpdateGroupWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.GroupCURDController/UpdateGroupWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCURDControllerServer).UpdateGroupWithResp(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GroupCURDController",
	HandlerType: (*GroupCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupCURDController_CreateGroup_Handler,
		},
		{
			MethodName: "CreateGroupWithResp",
			Handler:    _GroupCURDController_CreateGroupWithResp_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupCURDController_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupCURDController_GetGroup_Handler,
		},
		{
			MethodName: "CountGroup",
			Handler:    _GroupCURDController_CountGroup_Handler,
		},
		{
			MethodName: "ListGroup",
			Handler:    _GroupCURDController_ListGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupCURDController_UpdateGroup_Handler,
		},
		{
			MethodName: "UpdateGroupWithResp",
			Handler:    _GroupCURDController_UpdateGroupWithResp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// MembershipCURDControllerClient is the client API for MembershipCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MembershipCURDControllerClient interface {
	CreateMembership(ctx context.Context, in *MembershipInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateMembershipWithResp(ctx context.Context, in *MembershipInfo, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error)
	DeleteMembership(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*empty.Empty, error)
	CountMembershipByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CountOutput, error)
	ListMembershipByUser(ctx context.Context, in *ListMembershipByUserInput, opts ...grpc.CallOption) (*ListMembershipJoinOutput, error)
	CountMembershipByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*CountOutput, error)
	ListMembershipByGroup(ctx context.Context, in *ListMembershipByGroupInput, opts ...grpc.CallOption) (*ListMembershipJoinOutput, error)
	UpdateMembership(ctx context.Context, in *UpdateMembershipInput, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateMembershipWithResp(ctx context.Context, in *UpdateMembershipInput, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error)
	UpdateMembershipByGroup(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMembership(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*MembershipInfo, error)
	GetMembershipPermission(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error)
	GetFrozen(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*GBoolean, error)
	GetMembershipJoin(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*MemberJoin, error)
}

type membershipCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMembershipCURDControllerClient(cc grpc.ClientConnInterface) MembershipCURDControllerClient {
	return &membershipCURDControllerClient{cc}
}

func (c *membershipCURDControllerClient) CreateMembership(ctx context.Context, in *MembershipInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/CreateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) CreateMembershipWithResp(ctx context.Context, in *MembershipInfo, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error) {
	out := new(GetMembershipPermissionOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/CreateMembershipWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) DeleteMembership(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/DeleteMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) CountMembershipByUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*CountOutput, error) {
	out := new(CountOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/CountMembershipByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) ListMembershipByUser(ctx context.Context, in *ListMembershipByUserInput, opts ...grpc.CallOption) (*ListMembershipJoinOutput, error) {
	out := new(ListMembershipJoinOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/ListMembershipByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) CountMembershipByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*CountOutput, error) {
	out := new(CountOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/CountMembershipByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) ListMembershipByGroup(ctx context.Context, in *ListMembershipByGroupInput, opts ...grpc.CallOption) (*ListMembershipJoinOutput, error) {
	out := new(ListMembershipJoinOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/ListMembershipByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) UpdateMembership(ctx context.Context, in *UpdateMembershipInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/UpdateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) UpdateMembershipWithResp(ctx context.Context, in *UpdateMembershipInput, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error) {
	out := new(GetMembershipPermissionOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/UpdateMembershipWithResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) UpdateMembershipByGroup(ctx context.Context, in *UpdateInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/UpdateMembershipByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) GetMembership(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*MembershipInfo, error) {
	out := new(MembershipInfo)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/GetMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) GetMembershipPermission(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*GetMembershipPermissionOutput, error) {
	out := new(GetMembershipPermissionOutput)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/GetMembershipPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) GetFrozen(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*GBoolean, error) {
	out := new(GBoolean)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/GetFrozen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipCURDControllerClient) GetMembershipJoin(ctx context.Context, in *MemUserGroupInput, opts ...grpc.CallOption) (*MemberJoin, error) {
	out := new(MemberJoin)
	err := c.cc.Invoke(ctx, "/protos.MembershipCURDController/GetMembershipJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembershipCURDControllerServer is the server API for MembershipCURDController service.
type MembershipCURDControllerServer interface {
	CreateMembership(context.Context, *MembershipInfo) (*empty.Empty, error)
	CreateMembershipWithResp(context.Context, *MembershipInfo) (*GetMembershipPermissionOutput, error)
	DeleteMembership(context.Context, *MemUserGroupInput) (*empty.Empty, error)
	CountMembershipByUser(context.Context, *UserID) (*CountOutput, error)
	ListMembershipByUser(context.Context, *ListMembershipByUserInput) (*ListMembershipJoinOutput, error)
	CountMembershipByGroup(context.Context, *GroupID) (*CountOutput, error)
	ListMembershipByGroup(context.Context, *ListMembershipByGroupInput) (*ListMembershipJoinOutput, error)
	UpdateMembership(context.Context, *UpdateMembershipInput) (*empty.Empty, error)
	UpdateMembershipWithResp(context.Context, *UpdateMembershipInput) (*GetMembershipPermissionOutput, error)
	UpdateMembershipByGroup(context.Context, *UpdateInput) (*empty.Empty, error)
	GetMembership(context.Context, *MemUserGroupInput) (*MembershipInfo, error)
	GetMembershipPermission(context.Context, *MemUserGroupInput) (*GetMembershipPermissionOutput, error)
	GetFrozen(context.Context, *MemUserGroupInput) (*GBoolean, error)
	GetMembershipJoin(context.Context, *MemUserGroupInput) (*MemberJoin, error)
}

// UnimplementedMembershipCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedMembershipCURDControllerServer struct {
}

func (*UnimplementedMembershipCURDControllerServer) CreateMembership(context.Context, *MembershipInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) CreateMembershipWithResp(context.Context, *MembershipInfo) (*GetMembershipPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembershipWithResp not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) DeleteMembership(context.Context, *MemUserGroupInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembership not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) CountMembershipByUser(context.Context, *UserID) (*CountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembershipByUser not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) ListMembershipByUser(context.Context, *ListMembershipByUserInput) (*ListMembershipJoinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembershipByUser not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) CountMembershipByGroup(context.Context, *GroupID) (*CountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountMembershipByGroup not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) ListMembershipByGroup(context.Context, *ListMembershipByGroupInput) (*ListMembershipJoinOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembershipByGroup not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) UpdateMembership(context.Context, *UpdateMembershipInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) UpdateMembershipWithResp(context.Context, *UpdateMembershipInput) (*GetMembershipPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembershipWithResp not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) UpdateMembershipByGroup(context.Context, *UpdateInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembershipByGroup not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) GetMembership(context.Context, *MemUserGroupInput) (*MembershipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembership not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) GetMembershipPermission(context.Context, *MemUserGroupInput) (*GetMembershipPermissionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipPermission not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) GetFrozen(context.Context, *MemUserGroupInput) (*GBoolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrozen not implemented")
}
func (*UnimplementedMembershipCURDControllerServer) GetMembershipJoin(context.Context, *MemUserGroupInput) (*MemberJoin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipJoin not implemented")
}

func RegisterMembershipCURDControllerServer(s *grpc.Server, srv MembershipCURDControllerServer) {
	s.RegisterService(&_MembershipCURDController_serviceDesc, srv)
}

func _MembershipCURDController_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/CreateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).CreateMembership(ctx, req.(*MembershipInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_CreateMembershipWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembershipInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).CreateMembershipWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/CreateMembershipWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).CreateMembershipWithResp(ctx, req.(*MembershipInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_DeleteMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemUserGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).DeleteMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/DeleteMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).DeleteMembership(ctx, req.(*MemUserGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_CountMembershipByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).CountMembershipByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/CountMembershipByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).CountMembershipByUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_ListMembershipByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembershipByUserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).ListMembershipByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/ListMembershipByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).ListMembershipByUser(ctx, req.(*ListMembershipByUserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_CountMembershipByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).CountMembershipByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/CountMembershipByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).CountMembershipByGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_ListMembershipByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembershipByGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).ListMembershipByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/ListMembershipByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).ListMembershipByGroup(ctx, req.(*ListMembershipByGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/UpdateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).UpdateMembership(ctx, req.(*UpdateMembershipInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_UpdateMembershipWithResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).UpdateMembershipWithResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/UpdateMembershipWithResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).UpdateMembershipWithResp(ctx, req.(*UpdateMembershipInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_UpdateMembershipByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).UpdateMembershipByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/UpdateMembershipByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).UpdateMembershipByGroup(ctx, req.(*UpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemUserGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).GetMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/GetMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).GetMembership(ctx, req.(*MemUserGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_GetMembershipPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemUserGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).GetMembershipPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/GetMembershipPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).GetMembershipPermission(ctx, req.(*MemUserGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_GetFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemUserGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).GetFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/GetFrozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).GetFrozen(ctx, req.(*MemUserGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembershipCURDController_GetMembershipJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemUserGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipCURDControllerServer).GetMembershipJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.MembershipCURDController/GetMembershipJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipCURDControllerServer).GetMembershipJoin(ctx, req.(*MemUserGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _MembershipCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MembershipCURDController",
	HandlerType: (*MembershipCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMembership",
			Handler:    _MembershipCURDController_CreateMembership_Handler,
		},
		{
			MethodName: "CreateMembershipWithResp",
			Handler:    _MembershipCURDController_CreateMembershipWithResp_Handler,
		},
		{
			MethodName: "DeleteMembership",
			Handler:    _MembershipCURDController_DeleteMembership_Handler,
		},
		{
			MethodName: "CountMembershipByUser",
			Handler:    _MembershipCURDController_CountMembershipByUser_Handler,
		},
		{
			MethodName: "ListMembershipByUser",
			Handler:    _MembershipCURDController_ListMembershipByUser_Handler,
		},
		{
			MethodName: "CountMembershipByGroup",
			Handler:    _MembershipCURDController_CountMembershipByGroup_Handler,
		},
		{
			MethodName: "ListMembershipByGroup",
			Handler:    _MembershipCURDController_ListMembershipByGroup_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _MembershipCURDController_UpdateMembership_Handler,
		},
		{
			MethodName: "UpdateMembershipWithResp",
			Handler:    _MembershipCURDController_UpdateMembershipWithResp_Handler,
		},
		{
			MethodName: "UpdateMembershipByGroup",
			Handler:    _MembershipCURDController_UpdateMembershipByGroup_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _MembershipCURDController_GetMembership_Handler,
		},
		{
			MethodName: "GetMembershipPermission",
			Handler:    _MembershipCURDController_GetMembershipPermission_Handler,
		},
		{
			MethodName: "GetFrozen",
			Handler:    _MembershipCURDController_GetFrozen_Handler,
		},
		{
			MethodName: "GetMembershipJoin",
			Handler:    _MembershipCURDController_GetMembershipJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// PermissionCURDControllerClient is the client API for PermissionCURDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionCURDControllerClient interface {
	CreatePermission(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPermissionByGroup(ctx context.Context, in *PermissionGroupInput, opts ...grpc.CallOption) (*PermissionJoinUser, error)
	UpdatePermissionByGroup(ctx context.Context, in *UpdatePermissionByGroupInput, opts ...grpc.CallOption) (*empty.Empty, error)
	ListPermissionByGroup(ctx context.Context, in *ListPermissionByGroupInput, opts ...grpc.CallOption) (*PermissionJoinUsers, error)
	CheckPermissionByGroup(ctx context.Context, in *PermissionGroupInput, opts ...grpc.CallOption) (*GBoolean, error)
	CheckPermissionByID(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*GBoolean, error)
	CountPermissionByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*CountOutput, error)
}

type permissionCURDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionCURDControllerClient(cc grpc.ClientConnInterface) PermissionCURDControllerClient {
	return &permissionCURDControllerClient{cc}
}

func (c *permissionCURDControllerClient) CreatePermission(ctx context.Context, in *PermissionInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) GetPermissionByGroup(ctx context.Context, in *PermissionGroupInput, opts ...grpc.CallOption) (*PermissionJoinUser, error) {
	out := new(PermissionJoinUser)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/GetPermissionByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) UpdatePermissionByGroup(ctx context.Context, in *UpdatePermissionByGroupInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/UpdatePermissionByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) ListPermissionByGroup(ctx context.Context, in *ListPermissionByGroupInput, opts ...grpc.CallOption) (*PermissionJoinUsers, error) {
	out := new(PermissionJoinUsers)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/ListPermissionByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) CheckPermissionByGroup(ctx context.Context, in *PermissionGroupInput, opts ...grpc.CallOption) (*GBoolean, error) {
	out := new(GBoolean)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/CheckPermissionByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) CheckPermissionByID(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*GBoolean, error) {
	out := new(GBoolean)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/CheckPermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionCURDControllerClient) CountPermissionByGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*CountOutput, error) {
	out := new(CountOutput)
	err := c.cc.Invoke(ctx, "/protos.PermissionCURDController/CountPermissionByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionCURDControllerServer is the server API for PermissionCURDController service.
type PermissionCURDControllerServer interface {
	CreatePermission(context.Context, *PermissionInfo) (*empty.Empty, error)
	DeletePermission(context.Context, *PermissionID) (*empty.Empty, error)
	GetPermissionByGroup(context.Context, *PermissionGroupInput) (*PermissionJoinUser, error)
	UpdatePermissionByGroup(context.Context, *UpdatePermissionByGroupInput) (*empty.Empty, error)
	ListPermissionByGroup(context.Context, *ListPermissionByGroupInput) (*PermissionJoinUsers, error)
	CheckPermissionByGroup(context.Context, *PermissionGroupInput) (*GBoolean, error)
	CheckPermissionByID(context.Context, *PermissionID) (*GBoolean, error)
	CountPermissionByGroup(context.Context, *GroupID) (*CountOutput, error)
}

// UnimplementedPermissionCURDControllerServer can be embedded to have forward compatible implementations.
type UnimplementedPermissionCURDControllerServer struct {
}

func (*UnimplementedPermissionCURDControllerServer) CreatePermission(context.Context, *PermissionInfo) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) DeletePermission(context.Context, *PermissionID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) GetPermissionByGroup(context.Context, *PermissionGroupInput) (*PermissionJoinUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionByGroup not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) UpdatePermissionByGroup(context.Context, *UpdatePermissionByGroupInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissionByGroup not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) ListPermissionByGroup(context.Context, *ListPermissionByGroupInput) (*PermissionJoinUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionByGroup not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) CheckPermissionByGroup(context.Context, *PermissionGroupInput) (*GBoolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissionByGroup not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) CheckPermissionByID(context.Context, *PermissionID) (*GBoolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissionByID not implemented")
}
func (*UnimplementedPermissionCURDControllerServer) CountPermissionByGroup(context.Context, *GroupID) (*CountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPermissionByGroup not implemented")
}

func RegisterPermissionCURDControllerServer(s *grpc.Server, srv PermissionCURDControllerServer) {
	s.RegisterService(&_PermissionCURDController_serviceDesc, srv)
}

func _PermissionCURDController_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).CreatePermission(ctx, req.(*PermissionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).DeletePermission(ctx, req.(*PermissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_GetPermissionByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).GetPermissionByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/GetPermissionByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).GetPermissionByGroup(ctx, req.(*PermissionGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_UpdatePermissionByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionByGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).UpdatePermissionByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/UpdatePermissionByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).UpdatePermissionByGroup(ctx, req.(*UpdatePermissionByGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_ListPermissionByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionByGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).ListPermissionByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/ListPermissionByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).ListPermissionByGroup(ctx, req.(*ListPermissionByGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_CheckPermissionByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionGroupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).CheckPermissionByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/CheckPermissionByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).CheckPermissionByGroup(ctx, req.(*PermissionGroupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_CheckPermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).CheckPermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/CheckPermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).CheckPermissionByID(ctx, req.(*PermissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionCURDController_CountPermissionByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionCURDControllerServer).CountPermissionByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PermissionCURDController/CountPermissionByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionCURDControllerServer).CountPermissionByGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionCURDController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PermissionCURDController",
	HandlerType: (*PermissionCURDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionCURDController_CreatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionCURDController_DeletePermission_Handler,
		},
		{
			MethodName: "GetPermissionByGroup",
			Handler:    _PermissionCURDController_GetPermissionByGroup_Handler,
		},
		{
			MethodName: "UpdatePermissionByGroup",
			Handler:    _PermissionCURDController_UpdatePermissionByGroup_Handler,
		},
		{
			MethodName: "ListPermissionByGroup",
			Handler:    _PermissionCURDController_ListPermissionByGroup_Handler,
		},
		{
			MethodName: "CheckPermissionByGroup",
			Handler:    _PermissionCURDController_CheckPermissionByGroup_Handler,
		},
		{
			MethodName: "CheckPermissionByID",
			Handler:    _PermissionCURDController_CheckPermissionByID_Handler,
		},
		{
			MethodName: "CountPermissionByGroup",
			Handler:    _PermissionCURDController_CountPermissionByGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
